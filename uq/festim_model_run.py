#!/home/yehor/miniconda3/envs/festim-env/bin/python3
import sys
import os

import yaml
import argparse
from pathlib import Path

# Add parent directory to Python path to import festim_model
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if parent_dir not in sys.path:
    sys.path.insert(0, parent_dir)
    
# Now we can import festim_model from parent directory
from festim_model import Model


def load_config(config_file):
    """Load configuration from YAML file."""

    try:
        with open(config_file, 'r') as file:
            config = yaml.safe_load(file)
        return config
    except FileNotFoundError:
        print(f"Error: Configuration file '{config_file}' not found.")
        return None
    except yaml.YAMLError as e:
        print(f"Error parsing YAML file: {e}")
        return None

def main():

    # Set up command line argument parsing

    parser = argparse.ArgumentParser(description='Run FESTIM model with YAML configuration')
    
    parser.add_argument('--config', '-c', 
                       default='config.yaml',
                       help='Path to YAML configuration file (default: config.yaml)')
    
    args = parser.parse_args()
    
    print(f"Using Python executable: {sys.executable}")
    print(f"Using FESTIM model from: {Path(__file__).parent.parent / 'festim_model'}")
    print(f"Using configuration file: {args.config}")
    print(f"Current working directory: {os.getcwd()}")

    # Load configuration from YAML file
    config = load_config(args.config)
    if config is None:
        print("No config file provided, quitting...")
        return
    
    print(f"Loaded configuration from: {args.config}")

    print("Configuration parameters:")
    
    # Access configuration values
    model_params = config.get('model_parameters', {})
    geometry = config.get('geometry', {})
    materials = config.get('materials', {})
    simulation = config.get('simulation', {})
    boundary_conditions = config.get('boundary_conditions', {})
    
    # Print some key parameters
    print(f"  Temperature: {model_params.get('temperature', 'Not specified')} K")
    print(f"  Time step: {model_params.get('time_step', 'Not specified')} s")
    print(f"  Total time: {model_params.get('total_time', 'Not specified')} s")
    print(f"  Material: {materials.get('material_name', 'Not specified')}")
    print(f"  Mesh size: {simulation.get('mesh_size', 'Not specified')}")
    
    # Create an instance of the FESTIM model with configuration
    model = Model(config=config)
    
    # Run the FESTIM model with configuration
    results = model.run()
    
    # Save results to a file (for EasyVVUQ integration)
    save_results_for_uq(results, config)
    
    print("FESTIM simulation completed successfully!")
    return results

def save_results_for_uq(results, config):
    """Save results in format expected by EasyVVUQ."""
    import json
    import csv
    
    # Extract quantities of interest (QoIs)
    # You'll need to implement this based on your specific FESTIM model output
    tritium_inventory = extract_tritium_inventory(results, config)
    
    # Save as CSV for EasyVVUQ decoder
    output_file = "output.csv"
    with open(output_file, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['tritium_inventory'])  # Header
        writer.writerow([tritium_inventory])    # Data
    
    print(f"Results saved to {output_file}")
    print(f"Tritium inventory: {tritium_inventory}")

def extract_tritium_inventory(results, config):
    """Extract tritium inventory from FESTIM results."""
    # This is a placeholder - implement based on your specific FESTIM model
    # You might need to:
    # 1. Read the output files generated by FESTIM
    # 2. Integrate concentration over the domain
    # 3. Calculate total inventory
    
    try:
        # Example: Read from the results file
        result_folder = config.get('simulation', {}).get('output_directory', './results')
        result_file = os.path.join(result_folder, 'results.txt')
        
        if os.path.exists(result_file):
            # Read and process the results file
            import numpy as np
            data = np.genfromtxt(result_file, skip_header=1, delimiter=',')
            
            # Simple example: sum of final concentrations
            # Replace with actual inventory calculation
            volume_elem = 1e-6  # Example volume element in m^3 #TODO make calculate volume of an actual local element
            if len(data.shape) > 1 and data.shape[0] > 0:
                final_concentrations = data[:, -1]  # Last time step
                inventory = np.sum(final_concentrations) * volume_elem  
            else:
                inventory = 1.0e20  # Default value
        else:
            print(f"Warning: Results file not found: {result_file}")
            inventory = 1.0e20  # Default value
            
    except Exception as e:
        print(f"Error extracting tritium inventory: {e}")
        inventory = 1.0e20  # Default value
    
    return inventory


if __name__ == "__main__":
    main()
